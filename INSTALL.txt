The CVRanking Resume plugin is in an early development stage. 

DO NOT INSTALL ON PRODUCTION SITES IF YOU DON'T UNDERSTAND WHAT YOU ARE DOING!

To install this Elgg plugin, you need to follow the next steps.

== Contents ==

1. Activation and settings
2. SQL files
3. Changes to Elgg core in 1.8.x
4. Changes to Elgg core in 1.7.x
5. Profile Manager fields

== 1. Activation and settings ==

Copy the /resume folder to the /mod file in your Elgg directory.
Activate the plugin in the Administration>Plugin site.
Settings:
* You can turn on the different types/aspects (by selecting "Yes" from the dropdown menu): education, workexperience, language, research, publication, skill. 
* If you turn on CV Ranking, the default home page of the ePortfolio will be a summary of the user's (standard) CVR.
* If you turn on CVR, your users will be able to perform searches and comparisons of other users' CVR.

To hack the core files, visit http://cvrank.org/

== 2. SQL files ==

SQL files are available in the /sql folder.

If you want to use all the databases that we are currently testing, import the file cvranking.sql

If you are going to use the databases to obtain CVR calculations - and also if you want the autocomplete fields to work -,
but don't want to use the data we provide, you should at least import the cvranking_structure.sql file to your database.

== 3. Changes to Elgg core in 1.8.x ==

In Elgg version 1.8, you will have to modify the following files within the core.

* /engine/lib/input.php (to show AUTOCOMPLETE for universities, companies, languages).
Look for the function input_livesearch_page_handler($page), and add this text before 'default:"default:'

                          case 'universities':
				$query = "SELECT * FROM {$CONFIG->dbprefix}CVR_university_entity as une
					WHERE une.name LIKE '%$q%'
					LIMIT $limit
				";

				if ($entities = get_data($query)) {
					foreach ($entities as $entity) {
						$result = array(
							'type' => 'university',
							'name' => $entity->name,
							'desc' => $entity->country,
							'guid' => $entity->university_id,
							'value' => $entity->name,
							'icon' => $icon,
						);
						$results[$entity->name . rand(1, 100)] = $result;
					}
				}
                                
				break;
                              
                          case 'companies':
				$query = "SELECT * FROM {$CONFIG->dbprefix}CVR_company_entity as une
					WHERE une.name LIKE '%$q%'
					LIMIT $limit
				";

				if ($entities = get_data($query)) {
					foreach ($entities as $entity) {
						$result = array(
							'type' => 'company',
							'name' => $entity->name,
							'desc' => $entity->country,
							'guid' => $entity->company_id,
							'value' => $entity->name,
							'icon' => $icon,
						);
						$results[$entity->name . rand(1, 100)] = $result;
					}
				}
				break;
                                
                          case 'languages':
				$query = "SELECT * FROM {$CONFIG->dbprefix}CVR_language_entity as une
					WHERE une.name LIKE '%$q%'
					LIMIT $limit
				";
                                if ($entities = get_data($query)) {
					foreach ($entities as $entity) {
						$result = array(
							'type' => 'language',
							'name' => $entity->name,
							'desc' => $entity->level,
							'guid' => $entity->language_id,
							'value' => $entity->name,
							'icon' => $icon,
						);
						$results[$entity->name . rand(1, 100)] = $result;
					}
				}
				break;

== 4. Changes to Elgg core in 1.7.x ==

* /views/default/input/pulldown.php (FOR MULTIPLE INPUT/PULLDOWN SELECTION):

                if (is_array($vars['value'])) {
                    if (in_array($value, $vars['value'])) {
			echo "<option value=\"$encoded_value\" selected=\"selected\">$encoded_option</option>";
		    } 
                    else {
			echo "<option value=\"$encoded_value\">$encoded_option</option>";
                    }
                 }
                else {
		if ((string)$value == (string)$vars['value']) {
			echo "<option value=\"$encoded_value\" selected=\"selected\">$encoded_option</option>";
		} else {
			echo "<option value=\"$encoded_value\">$encoded_option</option>";
		}
                }

  
* /views/default/input/autocomplete.php (TO SHOW value=name INSTEAD OF value=id)
 
$value_show = $vars['value_show'];
if(!$value_show) {
	$value_show = '';
}

** Change also outside PHP tags:
 
<input type="text" class='autocomplete' name ='<?php echo $internalname; ?>_autocomplete' value='<?php echo $value_show?>' />
 
* /engine/lib/input.php (to show in AUTOCOMPLETE universities, companies,...)
                         
                         case 'universities':
				$query = "SELECT * FROM {$CONFIG->dbprefix}CVR_university_entity as une
					WHERE une.name LIKE '%$q%'
					LIMIT $limit
				";

				if ($entities = get_data($query)) {
					foreach ($entities as $entity) {
						$json = json_encode(array(
							'name' => $entity->name,
							'desc' => $entity->country,
							'icon' => '',
							'guid' => $entity->university_id,
						));
						$results[$entity->name . rand(1,100)] = $json;
					}
				}
				break;
                                
                          case 'companies':
				$query = "SELECT * FROM {$CONFIG->dbprefix}CVR_company_entity as une
					WHERE une.name LIKE '%$q%'
					LIMIT $limit
				";

				if ($entities = get_data($query)) {
					foreach ($entities as $entity) {
						$json = json_encode(array(
							'name' => $entity->name,
							'desc' => $entity->country,
							'icon' => '',
							'guid' => $entity->company_id,
						));
						$results[$entity->name . rand(1,100)] = $json;
					}
				}
				break;
                                
                          case 'languages':
				$query = "SELECT * FROM {$CONFIG->dbprefix}CVR_language_entity as une
					WHERE une.name LIKE '%$q%'
					LIMIT $limit
				";

				if ($entities = get_data($query)) {
					foreach ($entities as $entity) {
						$json = json_encode(array(
							'name' => $entity->name,
							'desc' => $entity->level,
							'icon' => '',
							'guid' => $entity->language_id,
						));
						$results[$entity->name . rand(1,100)] = $json;
					}
				}
				break;

== 5. Profile Manager fields ==

(A standard profile field for birth date will be needed for time adjustments - follow http://cvrank.org/ for news on this issue)